<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20190826T004920Z" application="Evernote/Windows" version="6.x">
<note><title>day16</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div><span style="font-size: 16pt; color: rgb(173, 0, 0); font-weight: bold;">ES5常用API</span></div><div><br/></div><div><span style="font-size: 14pt;">ES 即 ECMAScript，是JavaScript的语言标准</span></div><div><span style="font-size: 14pt;">ES5 即&nbsp;</span><span style="font-size: 14pt;">ECMAScript 5，</span><span style="font-size: 14pt;">也称为 ECMAScript 2009</span></div><div><span style="font-size: 14pt; color: rgb(51, 51, 51); font-family: 微软雅黑;">ES5支持情况：</span><span style="font-size: 14pt; font-family: 微软雅黑;">ie9+, chrome 19+, safari 5+, firefox 4+, opera 12+</span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt; font-weight: bold;">严格模式</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><span style="font-size: 14pt; font-family: 微软雅黑;">除了正常运行模式，ECMAscript5添加了第二种运行模式：&quot;严格模式&quot;（strict mode）。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">顾名思义，这种模式使得Javascript在更严格的条件下运行。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;"><br/></span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">设立&quot;严格模式&quot;的目的，主要有以下几个：</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;消除JavaScript语法的一些不合理、不严谨之处，减少一些怪异行为;</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;消除代码运行的一些不安全之处，保证代码运行的安全；</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;提高编译器效率，增加运行速度；</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">&nbsp;&nbsp; &nbsp;为未来新版本的JavaScript做好铺垫。</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">进入&quot;严格模式&quot;的标志：</span><span style="font-size: 14pt; font-family: 微软雅黑; color: rgb(173, 0, 0);">&quot;use strict&quot;;</span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">将 &quot;use strict&quot;; 放在脚本文件的第一行，则整个脚本都将以&quot;严格模式&quot;运行。</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;"><font color="#2D4FC9">&lt;script&gt;</font></span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;"><font color="#2D4FC9">&nbsp; &nbsp;&quot;use strict&quot;;</font></span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;"><font color="#2D4FC9">&nbsp; &nbsp;console.log(&quot;全局严格模式。&quot;);</font></span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;"><font color="#2D4FC9">&lt;/script&gt;</font></span></div><div><br/></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">将&quot;use strict&quot;放在函数体的第一行，则整个函数以&quot;严格模式&quot;运行。</span></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">function strict(){</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">&nbsp; &nbsp;&quot;use strict&quot;;</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">&nbsp; &nbsp;console.log(&quot;全局严格模式。&quot;);</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">}</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">ES5严格模式的限制规范：</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">1.变量声明必须使用var，否则报错</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">2.对不合理的操作显示报错，不再做静默失败处理</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">3.禁止对象属性重名（IE）</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">4.禁止函数参数重名</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">5.禁止使用以0开头的八进制数字</font></div><div><font face="微软雅黑" style="font-size: 14pt;">ES6新的语法标准，八进制以0o来表示，与16进制的0x形成统一的语法格式</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">6.禁止使用with语句</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">7.强制为eval创建新作用域</font></div><div><font face="微软雅黑" style="font-size: 14pt;">eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</font></div><div><font face="微软雅黑" style="font-size: 14pt;">如果参数是一个表达式，eval() 函数将执行表达式。</font></div><div><font face="微软雅黑" style="font-size: 14pt;">如果参数是Javascript语句，eval()将执行 Javascript 语句。</font></div><div><font face="微软雅黑" style="font-size: 14pt;">严格模式为JavaScript程序创建了第三种作用域：eval作用域</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">8.arguments不再追踪参数变化</font></div><div><font face="微软雅黑" style="font-size: 14pt;">var x = 1</font></div><div><font face="微软雅黑" style="font-size: 14pt;">function fn1(x) {</font></div><div><font face="微软雅黑" style="font-size: 14pt;">&nbsp;&nbsp; &nbsp;x = 2;</font></div><div><font face="微软雅黑" style="font-size: 14pt;">&nbsp;&nbsp; &nbsp;arguments[0] = 3;</font></div><div><font face="微软雅黑" style="font-size: 14pt;">&nbsp;&nbsp; &nbsp;alert(x);</font></div><div><font face="微软雅黑" style="font-size: 14pt;">}</font></div><div><font face="微软雅黑" style="font-size: 14pt;">fn1(4);</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">9.禁止使用arguments.callee</font></div><div><font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// 在匿名的递归函数中</font></div><div><font face="微软雅黑" style="font-size: 14pt;">var factorialArray = [1, 2, 3, 4, 5].map(function(n) {</font></div><div><font face="微软雅黑" style="font-size: 14pt;">return (n &lt; 2) ? 1 : arguments.callee(n - 1) * n;</font></div><div><font face="微软雅黑" style="font-size: 14pt;">});</font></div><div><font face="微软雅黑" style="font-size: 14pt;">console.log(factorialArray);</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt; font-family: 微软雅黑;">10.禁止</font><font style="font-size: 14pt; font-family: 微软雅黑;">this指向全局对象window，this变成undefined</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">11.函数必须声明在整个脚本或函数层面</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">12.新增一些保留字，不能使用他们作为标识符命名</font></div><div><font face="微软雅黑" style="font-size: 14pt;">implements, interface, let, package, private, protected, public, static, yield</font></div><div><span style="color: rgb(51, 51, 51);"><font face="微软雅黑" style="font-size: 14pt;">......</font></span></div></div><div><span style="font-size: 14pt;">&nbsp;</span></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt;"><span style="font-size: 14pt; font-weight: bold;">Array扩展</span></span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font style="font-size: 14pt; font-family: 微软雅黑;"><font><font>indexOf() 方法</font></font>返回指定元素在数组中的第一个的索引，不存在则返回 -1</font></div><div><font style="font-size: 14pt; font-family: 微软雅黑;"><br/></font></div><div><font style="font-size: 14pt; font-family: 微软雅黑;"><font>lastIndexOf() 方法</font>返回指定元素在数组中的最后一个的索引，不存在则返回 -1</font></div><div><font style="font-size: 14pt; font-family: 微软雅黑;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">forEach() 方法为每个元素执行对应的方法</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt; font-family: 微软雅黑;">map() 方法对数组的每个元素进行一定操作后，返回一个新的数组</font></div><div><font style="font-size: 14pt; font-family: 微软雅黑;"><br/></font></div><div><span style="font-size: 14pt; font-family: 微软雅黑;">filter() 方法返回一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</span></div><div><span style="font-size: 14pt; font-family: 微软雅黑;"><br/></span></div><div><font face="微软雅黑" style="font-size: 14pt;">Array.isArray() 方法检查对象是否为数组</font></div><div><font face="微软雅黑" style="font-size: 14pt;">......</font></div></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt;"><br/></span></div><div><span style="font-size: 14pt; font-weight: bold;">Object扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font face="微软雅黑" style="font-size: 14pt;">返回指定对象的所有自身可枚举属性组成的数组</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.keys(object)</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj1 = {a: 123, b: 456, c: 789};</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj2 = {7: 123, 3: 456, 13: 789};</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log( Object.getOwnPropertyNames(obj1) );</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log( Object.getOwnPropertyNames(obj2) );</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// [&quot;3&quot;, &quot;7&quot;, &quot;13&quot;]</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">for (var key in obj2){</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">&nbsp;&nbsp; &nbsp;console.log(key);</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// &apos;3&apos;&nbsp; &apos;7&apos;&nbsp; &apos;13&apos;</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">}</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">返回指定对象的所有自身属性组成的数组（包括不可枚举属性）</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.getOwnPropertyNames(object)</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj1 = {a: 123, b: 456, c: 789};</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj2 = {7: 123, 3: 456, 13: 789};</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log( Object.getOwnPropertyNames(obj1) );</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log( Object.getOwnPropertyNames(obj2) );</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// [&quot;3&quot;, &quot;7&quot;, &quot;13&quot;]</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">创建新对象并指定其原型，返回新对象</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.create(prototype, [descriptors])</font></div><div><font face="微软雅黑" style="font-size: 14pt;">prototype：新对象的原型对象，不能省略，可以为 null</font></div><div><font face="微软雅黑" style="font-size: 14pt;">[descriptors]：可选，为新对象指定新的属性, 并对属性进行描述</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">var obj = {a: 123, b: 456};</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">var obj1 = Object.create(null);</font> <font color="#A8A8A8">// 没有继承的属性</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">var obj2 = Object.create(obj);</font> <font color="#A8A8A8">// 继承了obj对象</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">返回对象的原型</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.getPrototypeOf(object)</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var proto = Object.getPrototypeOf(obj2);</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log(proto);&nbsp;</font><font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// {a: 123, b: 456}</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.defineProperty(object, property, descriptor)</font></div><div><font face="微软雅黑" style="font-size: 14pt;">object&nbsp;要在其上定义属性的对象。</font></div><div><font face="微软雅黑" style="font-size: 14pt;">property&nbsp;要定义或修改的属性的名称。</font></div><div><font face="微软雅黑" style="font-size: 14pt;">descriptor&nbsp;将被定义或修改的属性描述符(对象)</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">descriptor&nbsp;<font>属性描述符具有以下可选键值：</font></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">configurable</font></div><div><font face="微软雅黑" style="font-size: 14pt;">当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">enumerable</font></div><div><font face="微软雅黑" style="font-size: 14pt;">当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">writable</font></div><div><font face="微软雅黑" style="font-size: 14pt;">当且仅当该属性的writable为true时，value才能被赋值运算符改变。默认为 false。</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">value</font></div><div><font face="微软雅黑"><span style="font-size: 14pt;">该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为</span> <font style="font-size: 14pt;">undefined。</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj1 = Object.defineProperty({},&apos;abc&apos;,{</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>configurable: true,</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>enumerable: true,</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>writable: true,&nbsp;</font><font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// 默认值false</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>value: &apos;123&apos;</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">});</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">obj1.abc = 456;</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log(obj1.abc);</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑"><font style="font-size: 14pt;">对</font><span style="font-size: 14pt;">象访问器 属性</span> <font color="#2D4FC9" style="font-size: 14pt;">Getter</font> <span style="font-size: 14pt;">和</span> <font color="#2D4FC9" style="font-size: 14pt;">Setter，</font></font><span style="font-size: 14pt; font-family: 微软雅黑;">ES5 允许使用类似于获取或设置属性的语法来定义对象方法。</span></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">get</font></div><div><font face="微软雅黑" style="font-size: 14pt;">一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，默认为 undefined。</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">set</font></div><div><font face="微软雅黑"><span style="font-size: 14pt;">一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行</span><font style="font-size: 14pt;">该方法。该方法将接受唯一参数，即该属性新的参数值。默认为 undefined。</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj3 = {</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>name: &apos;xm&apos;,</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>age: 18,</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>say: function (){</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span><span>&nbsp;&nbsp; &nbsp;</span>alert(&apos;大家好&apos;);</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>}</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">}</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">Object.defineProperty(obj3,&apos;age&apos;,{</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><span style="color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;</span><font color="#A8A8A8">// 是否可配置(枚举、可写、删除)</font></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>configurable: true,</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><span style="color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;</span><font color="#A8A8A8">// 是否可枚举属性（遍历属性）</font></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>enumerable: true,</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>set(value) {</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span><span>&nbsp;&nbsp; &nbsp;</span>console.log(&apos;触发setter函数&apos;);</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span><span>&nbsp;&nbsp; &nbsp;</span>this._age = value;&nbsp;</font><font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">//用中间介质变量this._age，不能直接用this.age</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>},</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>get() {</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;<span>&nbsp;&nbsp; &nbsp;</span></span>console.log(&apos;触发getter函数&apos;);</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span><span>&nbsp;&nbsp; &nbsp;</span>return this._age;&nbsp;</font><font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">//用中间介质变量this._age，不能直接用this.age</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;"><span>&nbsp;&nbsp; &nbsp;</span>}</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">});</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">obj3.age = 22;</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log(obj3.age);</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log( Object.getOwnPropertyDescriptor(obj3,&apos;age&apos;) );</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">注意：一个描述符不能同时</font><font color="#E30000" face="微软雅黑" style="font-size: 14pt;"><font>有(</font>writable、<font>val</font></font><font style="font-size: 14pt; font-family: 微软雅黑; color: rgb(227, 0, 0);">ue)和(get、set)关键字。</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">添加或更改多个对象属性</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.defineProperties(object, descriptors)</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">返回对象的属性的描述符</font></div><div><font color="#E30000" face="微软雅黑" style="font-size: 14pt;">Object.getOwnPropertyDescriptor(object, property)</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div></div><div><span style="font-size: 14pt;">&nbsp;</span></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt; font-weight: bold;">String扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font face="微软雅黑" style="font-size: 14pt;">String.trim() 删除字符串两端的空白字符。</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var str = &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello World!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">console.log( str.trim() );</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// &apos;Hello World!&apos;</font></div></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt; font-weight: bold;">Date扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font face="微软雅黑" style="font-size: 14pt;">Date.now() 返回自时间起点到当前的毫秒数</font></div><div><font face="微软雅黑" style="font-size: 14pt;">Date.now() 的返回与在 Date 对象上执行 getTime() 的结果相同</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">console.log(&nbsp;Date.now() );</font> <font color="#A8A8A8">//&nbsp;<a dir="ltr" href="tel:1566646195347">1566646195347</a></font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">console.log( new Date().getTime() );</font> <font color="#A8A8A8">// <a dir="ltr" href="tel:1566646195347">1566646195347</a></font></font></div></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt; font-weight: bold;">Function扩展</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font face="微软雅黑" style="font-size: 14pt;">bind(obj) 将函数内的this绑定为obj, 并将函数返回</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var obj = {abc: 123};</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">setTimeout(function (){</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">&nbsp;&nbsp; &nbsp;console.log(this);</font> <font color="#A8A8A8" face="微软雅黑" style="font-size: 14pt;">// obj</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">}.bind(obj),1000);</font></div></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><span style="font-size: 14pt; font-weight: bold;">JSON方法</span></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font face="微软雅黑" style="font-size: 14pt;">在数据传输流程中，JSON是以文本(即字符串)的形式传递</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">var json1 = &apos;{ &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; }&apos;;</font> <font color="#A8A8A8">// JSON字符串</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">var json2 = { &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; };</font> <font color="#A8A8A8">//&nbsp;&nbsp;JSON对 象</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">JSON.parse() 用于将JSON字符串转换为JSON对象</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">var obj = JSON.parse(json1);</font> <font color="#A8A8A8">// 需严格的json格式</font></font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">JSON.stringify() 用于将JSON对象转换为JSON字符串</font></div><div><font color="#2D4FC9" face="微软雅黑" style="font-size: 14pt;">var str = JSON.stringify(json2);</font></div></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><span style="font-size: 14pt; font-weight: bold;">classList对象</span></font></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;"><div><font face="微软雅黑" style="font-size: 14pt;">在新的API里，页面里的每个DOM节点上都有一个classList对象</font></div><div><font face="微软雅黑" style="font-size: 14pt;">可以使用classList对象里面的方法新增、删除、修改及判断节点上的CSS类</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><br/></font></div><div><font face="微软雅黑" style="font-size: 14pt;">classList对象一些很有用的属性方法：</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">length</font>&nbsp;&nbsp;类名个数</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">item(index)</font>&nbsp;&nbsp;获取类名</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">add(class1,class2, ...)&nbsp;</font>&nbsp;添加类</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">remove(class1,class2, ...)</font>&nbsp;&nbsp;删除类</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">contains(class)</font>&nbsp;&nbsp;判断类</font></div><div><font face="微软雅黑" style="font-size: 14pt;"><font color="#2D4FC9">toggle(class)</font>&nbsp;&nbsp;反转类</font></div></div><div><font style="font-size: 14pt;"><br/></font></div><div><font style="font-size: 14pt;"><br/></font></div></en-note>]]></content><created>20190824T052241Z</created><updated>20190825T095411Z</updated><note-attributes><author>陶舒健</author><source>desktop.win</source><source-url>chrome-devtools://devtools/bundled/devtools_app.html?remoteBase=https://chrome-devtools-frontend.appspot.com/serve_file/@cd0b15c8b6a4e70c44e27f35c37a4029bad3e3b0/&amp;can_dock=true&amp;panel=elements&amp;dockSide=undocked</source-url><source-application>yinxiang.win32</source-application></note-attributes></note></en-export>
